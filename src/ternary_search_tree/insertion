# Initializing the insertion attributes 
class Node: 
    def __int__(self, char): 
        self.char = char 
        self.less_than = None # Initially, the nodes from left, middle and right side are empty 
        self.equal = None
        self.larger_than = None 
        self.is_end = False # This attribute will verify if a word ended or not 

# Initializing the tree 
class TernarySearchTree: 
    def __int__(self): 
        self.root = None # This means we start the tree with no nodes 
        self.size = 0 
        self.has_empty_string = False 
    
    def insert(self,word): 
        if word == "": # Verify if it's an empty string  
            if not self.has_empty_string:
                self.has_empty_string = True
                self.size += 1
            return
        
        def _insert(node,word,index):
            c = word[index] # Current character we are trying to insert 

            if node is None: 
                node = Node(c) # If the node is empty, we make a new node 
